1) Create Schema:
2) Common Dimensions:
	Generate Dates:
		a) Create Tables / Views
		b) Extract Date dimension
		c) Populate table TEMP_FISCAL_PERIODS
		d) Populate table DATE_DATA
		e) Populate table FISCAL_PERIODS
		f) Create Index
	Load Geographic Data
		a) Create Tables for Geo data
		b) Generate work/cities file
		c) Populate table GEO_CITIES_DATA
		d) Create index
	Load Common Dimensions
		a) Create tables for dimensions
		b) Extract CO Dimension
		c) Populate the tables BUSINESS_UNIT , 
		                       CUSTOMER , 
		                       COMPANY , 
		                       PROFIT_CENTER, 
		                       DIVISION_TYPE, 
		                       PERSON , 
		                       PRODUCT and 
		                       LOCAL_CURRENCY
3) DataMarts
	Load Sales Mart
		a) Get Previous Extract Date for incremental data
		b) Drop and create SO tables and views
		c) Extract Order Transactions
		d) Extract Shipment Transactions
		e) Generate Sales Order Fact with SKs
		f) Load SALES_ORDER_FACTS
		g) Generate Sales Delivery Fact with SKs
		h) Load SALES_DELIVERY_FACTS
		i) Extract for Sales Period Facts
		j) Load to SO_FACTS_BY_PERIOD
		k) Populate DATE_DATA_EXTRACT for last updated date
		l) Load Aggregate Tables
		m) Create Indexes
	Load Finance Mart
		a) Get Previous Extract Date for incremental data
		b) Drop & Re-Create GL Tables and Views
		c) Extract CFType / Account, Budget, GL Trans, Trial Balance & Budget Item Dimensions and Trial Balance / Budget Item Facts.
		d) Load GL_ACCOUNT, GL_BUDGET
		e) Generate account facts sk 
		f) Populate GL_ACCOUNT_FACTS from the accountfactssk file
		g) Generate Budget Facts SK file
		h) Populate GL_BUDGET_PERIOD_FACTS
		i) Load Account Period Facts SK file
		j) Load GL_FACTS_BY_PERIOD from the file.

=============================================================================================================================
/*
SELECT 	COALESCE(to_char(EXTRACT(year FROM yearperiod_end),'9999'),'?') AS year,
	'CL' as date_pattern,
	to_char(period_start,'YYYY/MM/DD')::text as start_date,
	to_char(period_end,'YYYY/MM/DD')::text as end_date,
	COALESCE(to_char(period_quarter,'9'),'?') AS quarter,
	period_number as period
FROM period 
LEFT OUTER JOIN yearperiod ON (period_yearperiod_id=yearperiod_id)  
ORDER BY period_start;
*/  

select  /*date_format(year_start_date,'%Y/%m/%d') year(year_start_date)*/ from erpnext.`tabFiscal Year`;

select * from erpnext.`tabGL Entry`;

=============================================================================================================================

-----------------------------------------------------------------------------------------------------------------------------
-- Extract Customer Dimension
SELECT
--  Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  and replace csv separator ;
	regexp_replace(SUBSTR("cust_name", 0, 40) || ', ' || "cust_number", E'\r|\n|;', '', 'g') as "customer_name",
	"cust_terms_id" as "payment_terms",
	"cust_number" as "customer_nk",
	"cust_creditlmt" as "credit_limit"
FROM custinfo

======

SELECT COUNT from
	(SELECT 	
	cust_number, count(*) as COUNT
	FROM custinfo
	GROUP BY cust_number) counts
WHERE COUNT > 1

-- Extract Sales Person Dimension
======

SELECT	salesrep_number as "person_nk",

--  	Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  	and replace csv separator ;
		regexp_replace(SUBSTR("salesrep_name", 0, 40) || ', ' || "salesrep_number", E'\r|\n|;', '', 'g') as "name",
		'ACCOUNT_REP' as "role"

======
SELECT COUNT from
	(SELECT salesrep_number, count(*) as COUNT
	FROM salesrep
	GROUP BY salesrep_number) counts
WHERE COUNT > 1

-- Extract Products Dimension
======

SELECT	item_number as"product_nk",
--  	Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  	and replace csv separator ;
		regexp_replace(SUBSTR(description1, 0, 40) || ', ' || item_number, E'\r|\n|;', '', 'g') as "product_name", 
		CASE WHEN item_type = '' THEN 'Unspecified'
			ELSE COALESCE(item_type, 'Unspecified') END as "type", 
		CASE WHEN class_code = '' THEN 'Unspecified'
			ELSE COALESCE(class_code, 'Unspecified') END as "class",
		CASE WHEN product_category = '' THEN 'Unspecified'
			ELSE COALESCE(product_category, 'Unspecified') END as "category"
FROM api.item;
======

-- Extract Company Dimension
=============
SELECT
	CASE WHEN company_number = '' THEN 'Unspecified'
			ELSE COALESCE(company_number, 'Unspecified') END as "company_nk",
--  Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  and replace csv separator ;
	regexp_replace(SUBSTR(company_descrip, 0, 40) || ', ' || company_number, E'\r|\n|;', '', 'g') as "company_name",
	company_external
FROM company;

=============

SELECT COUNT from
(SELECT company_number as"company_nk", count(*) as COUNT 
FROM company
GROUP BY company_number) counts
WHERE COUNT > 1

=================================================================================================
SELECT
	curr_abbr as local_currency_nk,
	CASE WHEN curr_base = TRUE THEN 'Y' ELSE '' END AS local_currency_base
FROM curr_symbol;

SELECT COUNT from
(SELECT curr_abbr, count(*) as COUNT 
FROM curr_symbol
GROUP BY curr_abbr) counts
WHERE COUNT > 1

=================================================================================================
SELECT
	prftcntr_number as profit_center_nk,
--  Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  and replace csv separator ;
	regexp_replace(SUBSTR(prftcntr_descrip, 0, 40) || ', ' || prftcntr_number, E'\r|\n|;', '', 'g') as "name"
FROM prftcntr;

SELECT COUNT from
(SELECT prftcntr_number, count(*) as COUNT 
FROM prftcntr
GROUP BY prftcntr_number) counts
WHERE COUNT > 1


SELECT
	0001 as business_unit_nk,
	'Sample Business Unit' as business_unit



SELECT
	0001 as division_nk,
	'Sample Division' as division,
	'Division' as division_type;



-----------------------------------------------------------------------------------------------------------------------------
-- Get Previous Extract Date ------

SELECT "THE_DATE"
FROM "ERPI"."DATE_DATA_EXTRACT"
where "DATA_MART" = 'SO';

-----------------------------------------------------------------------------------------------------------------------------
--Extract Order transactions
select
	CASE WHEN cohead_number = '' THEN 'Unspecified'
		ELSE COALESCE(cohead_number, 'Unspecified') END 									as "ID_Document_NK",
	CASE WHEN cohead_number = '' THEN 'Unspecified'
		ELSE COALESCE(cohead_number, 'Unspecified') END 									as "ID_Trans_Doc_NK", 	
	(CASE WHEN cohead_number = '' THEN 'Unspecified' 
		ELSE COALESCE(CAST(cohead_number as varchar(30)), 'Unspecified') END) || '-' ||
	formatsolinenumber(coitem.coitem_id)::character varying									as "Line_NK",
	to_char(cohead_orderdate,'MM/DD/YYYY')													as "Issue_Date",
--
--  We can't allow null or nonsense promose dates.  An no earlier dates as they may not exist in the dates dimension
-- 													
    CASE
            WHEN coitem_promdate IS NULL THEN to_char(cohead_orderdate,'MM/DD/YYYY')::text
            WHEN coitem_promdate < cohead_orderdate THEN to_char(cohead_orderdate,'MM/DD/YYYY')::text
            WHEN to_char(coitem_promdate,'MM/DD/YYYY') = '01/01/2100'::bpchar THEN to_char(cohead_orderdate,'MM/DD/YYYY')::text
            ELSE to_char(coitem_promdate,'MM/DD/YYYY')::text
    END 																					as "Promise_Date",
	--COALESCE(to_char(coitem_promdate,'MM/DD/YYYY'), to_char(cohead_orderdate,'MM/DD/YYYY')) 	as "Promise_Date",
	currtobase(cohead_curr_id, coitem_price, cohead_orderdate) 								as so_baseunitprice,
	round((coitem_qtyord * currtobase(cohead_curr_id, coitem_custprice, cohead_orderdate)), 2) 	as "Amount",
	round((coitem_qtyord * currtobase(cohead_curr_id, coitem_custprice, cohead_orderdate)), 2) 	as "Amount_Local",
	round((coitem_qtyord * currtobase(cohead_curr_id, coitem_price, cohead_orderdate)), 2) 	as "Amount_List",
	round((coitem_qtyord * currtobase(cohead_curr_id, coitem_price, cohead_orderdate)), 2) 	as "Amount_List_Local",
	coitem_qtyord																			as "Quantity_Order",					    
	COALESCE(coitem_unitcost, 0)															as "Cost",
	cust_number 																			as "Customer",
	(SELECT company_number FROM company ORDER BY company_number DESC LIMIT 1)				as "Company",
	item_number																				as "Item",
	(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE) 								as "Local_Currency",
	'Unspecified' 																			as "Division",
	'Unspecified' 																			as "Business_Unit",
	salesrep_number 																		as "Account_Rep",
	'Unspecified' 																			as "Profit_Center",
	CASE WHEN cohead_shiptocity = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptocity, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Ship_City",
	CASE WHEN cohead_shiptostate = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptostate, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Ship_Region",
	CASE WHEN cohead_shiptocountry = '' THEN '${erpi.defaultcountry}'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptocountry, E'\r|\n|;', '', 'g')), '${erpi.defaultcountry}') 
		END																					as "Ship_Country",
	CASE WHEN cohead_billtocity = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_billtocity, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Bill_City",
	CASE WHEN cohead_billtostate = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_billtostate, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END							as "Bill_Region",
	CASE WHEN cohead_billtocountry = '' THEN '${erpi.defaultcountry}'
		ELSE COALESCE(upper(regexp_replace(cohead_billtocountry, E'\r|\n|;', '', 'g')), '${erpi.defaultcountry}') 
		END			as "Bill_Country"
from coitem
 join cohead on coitem_cohead_id=cohead_id													-- sales order 
  join custinfo on cust_id=cohead_cust_id													-- customer 
  join salesrep on salesrep_id=cohead_salesrep_id											-- sales rep
  join itemsite on itemsite_id=coitem_itemsite_id											-- item inventory site
  join whsinfo on warehous_id=itemsite_warehous_id											-- warehouse / site
  join item on item_id=itemsite_item_id

WHERE ((cohead_orderdate >= '${extractstartdate}' OR (cohead_orderdate >= '${erpi.start.date}' AND cohead_lastupdated >= '${extractstartdate}'))
		AND coitem_status != 'X')

-----------------------------------------------------------------------------------------------------------------------------
--Extract Shipment Transactions
select
	CASE WHEN cohead_number = '' THEN 'Unspecified'
		ELSE COALESCE(cohead_number, 'Unspecified') END 									as "ID_Document_NK",	
	shiphead_number			 																as "ID_Trans_Doc_NK",
	(CASE WHEN cohead_number = '' THEN 'Unspecified'
		ELSE COALESCE(shiphead_number, 'Unspecified') END) || '-' || shipitem_id			as "Line_NK",
	to_char(shiphead_shipdate,'MM/DD/YYYY') 												as "Issue_Date",
    CASE
            WHEN coitem_promdate IS NULL THEN to_char(cohead_orderdate,'MM/DD/YYYY')::text
            WHEN to_char(coitem_promdate,'MM/DD/YYYY') = '01/01/2100'::bpchar THEN to_char(cohead_orderdate,'MM/DD/YYYY')::text
            ELSE to_char(coitem_promdate,'MM/DD/YYYY')::text
    END 																					as "Promise_Date",
	currtobase(cohead_curr_id, coitem_price, cohead_orderdate) 								as so_baseunitprice,
	round((coitem_qtyord * currtobase(cohead_curr_id, coitem_price, cohead_orderdate)), 2) 	as so_baseextprice,  -- ext order amount
	round((shipitem_qty * currtobase(cohead_curr_id, coitem_custprice, cohead_orderdate)), 2) 	as "Amount_Local",
	round((shipitem_qty * currtobase(cohead_curr_id, coitem_custprice, cohead_orderdate)), 2) 	as "Amount",
	round((shipitem_qty * currtobase(cohead_curr_id, coitem_price, cohead_orderdate)), 2) 	as "Amount_List",
	round((shipitem_qty * currtobase(cohead_curr_id, coitem_price, cohead_orderdate)), 2) 	as "Amount_List_Local",
	coitem_qtyord																			as "Quantity_Order",	
	round((shipitem_qty * currtobase(cohead_curr_id, coitem_unitcost, cohead_orderdate)), 2) as "Cost",
	cust_number 																			as "Customer",
	(SELECT company_number FROM company ORDER BY company_number DESC LIMIT 1)				as "Company",
	CASE WHEN item_number = '' THEN 'Unspecified'
		ELSE COALESCE(item_number, 'Unspecified') END 										as "Item",
	(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE) 								as "Local_Currency",
	'Unspecified' 																			as "Division",
	'Unspecified' 																			as "Business_Unit",
	salesrep_number 																		as "Account_Rep",
	'Unspecified' 																			as "Profit_Center",
	CASE WHEN cohead_shiptocity = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptocity, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Ship_City",
	CASE WHEN cohead_shiptostate = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptostate, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Ship_Region",
	CASE WHEN cohead_shiptocountry = '' THEN '${erpi.defaultcountry}'
		ELSE COALESCE(upper(regexp_replace(cohead_shiptocountry, E'\r|\n|;', '', 'g')), '${erpi.defaultcountry}') 
		END																					as "Ship_Country",
	CASE WHEN cohead_billtocity = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_billtocity, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END																					as "Bill_City",
	CASE WHEN cohead_billtostate = '' THEN 'Unspecified'
		ELSE COALESCE(upper(regexp_replace(cohead_billtostate, E'\r|\n|;', '', 'g')), 'Unspecified') 
		END							as "Bill_Region",
	CASE WHEN cohead_billtocountry = '' THEN '${erpi.defaultcountry}'
		ELSE COALESCE(upper(regexp_replace(cohead_billtocountry, E'\r|\n|;', '', 'g')), '${erpi.defaultcountry}') 
		END			as "Bill_Country"
from coitem
 join cohead on coitem_cohead_id=cohead_id													-- sales order 
  join custinfo on cust_id=cohead_cust_id													-- customer 
  join salesrep on salesrep_id=cohead_salesrep_id											-- sales rep
  join itemsite on itemsite_id=coitem_itemsite_id											-- item inventory site
  join whsinfo on warehous_id=itemsite_warehous_id											-- warehouse / site
  join item on item_id=itemsite_item_id														-- item master
  left outer join (
    select shiphead_number, shipitem_qty, shipitem_id, shipitem_value, shiphead_shipdate, shiphead_order_type, shipitem_orderitem_id, shipitem_invcitem_id
    from shiphead								-- shipment
    join shipitem on shipitem_shiphead_id = shiphead_id  			-- shipment item  (NOT line item, more like a issue transaction!)
  ) as ship on shiphead_order_type='SO' and shipitem_orderitem_id=coitem_id
where shiphead_number != '' AND 
	 (cohead_orderdate >= '${extractstartdate}' AND shiphead_shipdate >= '${extractstartdate}')

-----------------------------------------------------------------------------------------------------------------------------
-- Load Aggregate Table
/******************************************************************
 Populate aggregate table
******************************************************************/ 
INSERT INTO "ERPI"."AGG_NOITEM_SALES_ORDER_FACTS" (
    "ORDERDATE_YEAR",
    "ORDERDATE_PERIOD",
    "PROMISEDATE_YEAR",
    "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K",
    "AMOUNT",
    "AMOUNT_LOCAL",
    "AMOUNT_LIST",
    "AMOUNT_LIST_LOCAL",
    "QUANTITY_ORDER",
    "ID_DOCUMENT_NK",
    "COST",
    "DAYS_ORDER_DATE",
    "DAYS_PROMISE_DATE",
    "FACT_COUNT"
    )
select
    "ISSUE_DATE"."YEAR" as "ORDERDATE_YEAR",
    "ISSUE_DATE"."PERIOD" as "ORDERDATE_PERIOD",
    "PROMISE_DATE"."YEAR" as "PROMISEDATE_YEAR",
    "PROMISE_DATE"."PERIOD" as "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K",
    sum("SALES_ORDER_FACTS"."AMOUNT") as "AMOUNT",
    sum("SALES_ORDER_FACTS"."AMOUNT_LOCAL") as "AMOUNT_LOCAL",
    sum("SALES_ORDER_FACTS"."AMOUNT_LIST") as "AMOUNT_LIST",
    sum("SALES_ORDER_FACTS"."AMOUNT_LIST_LOCAL") as "AMOUNT_LIST_LOCAL",
    sum("SALES_ORDER_FACTS"."QUANTITY_ORDER") as "QUANTITY_ORDER",
    count(distinct "SALES_ORDER_FACTS"."ID_DOCUMENT_NK") as "ID_DOCUMENT_NK",
    sum("SALES_ORDER_FACTS"."COST") as "COST",
    min("SALES_ORDER_FACTS"."ISSUE_DATE_K") as "DAYS_ORDER_DATE",
    max("SALES_ORDER_FACTS"."PROMISE_DATE_K") as "DAYS_PROMISE_DATE",   
    count(*) as "FACT_COUNT"
from
    "ERPI"."SALES_ORDER_FACTS" as "SALES_ORDER_FACTS",
    "ERPI"."DATE_DATA_CL" as "ISSUE_DATE",
    "ERPI"."DATE_DATA_CL" as "PROMISE_DATE"
where
    "SALES_ORDER_FACTS"."ISSUE_DATE_K" = "ISSUE_DATE"."DAYS_DATE"
and
    "SALES_ORDER_FACTS"."PROMISE_DATE_K" = "PROMISE_DATE"."DAYS_DATE"
group by
    "ISSUE_DATE"."YEAR",
    "ISSUE_DATE"."PERIOD",
    "PROMISE_DATE"."YEAR",
    "PROMISE_DATE"."PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K";
/******************************************************************
 Populate aggregate table
******************************************************************/ 
INSERT INTO "ERPI"."AGG_NOCUST_SALES_ORDER_FACTS" (
    "ORDERDATE_YEAR",
    "ORDERDATE_PERIOD",
    "PROMISEDATE_YEAR",
    "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K",
    "AMOUNT",
    "AMOUNT_LOCAL",
    "AMOUNT_LIST",
    "AMOUNT_LIST_LOCAL",
    "QUANTITY_ORDER",
    "ID_DOCUMENT_NK",
    "COST",
    "DAYS_ORDER_DATE",
    "DAYS_PROMISE_DATE",
    "FACT_COUNT"
    )
select
    "ISSUE_DATE"."YEAR" as "ORDERDATE_YEAR",
    "ISSUE_DATE"."PERIOD" as "ORDERDATE_PERIOD",
    "PROMISE_DATE"."YEAR" as "PROMISEDATE_YEAR",
    "PROMISE_DATE"."PERIOD" as "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K",
    sum("SALES_ORDER_FACTS"."AMOUNT") as "AMOUNT",
    sum("SALES_ORDER_FACTS"."AMOUNT_LOCAL") as "AMOUNT_LOCAL",
    sum("SALES_ORDER_FACTS"."AMOUNT_LIST") as "AMOUNT_LIST",
    sum("SALES_ORDER_FACTS"."AMOUNT_LIST_LOCAL") as "AMOUNT_LIST_LOCAL",
    sum("SALES_ORDER_FACTS"."QUANTITY_ORDER") as "QUANTITY_ORDER",
    count(distinct "SALES_ORDER_FACTS"."ID_DOCUMENT_NK") as "ID_DOCUMENT_NK",
    sum("SALES_ORDER_FACTS"."COST") as "COST",
    min("SALES_ORDER_FACTS"."ISSUE_DATE_K") as "DAYS_ORDER_DATE",
    max("SALES_ORDER_FACTS"."PROMISE_DATE_K") as "DAYS_PROMISE_DATE",   
    count(*) as "FACT_COUNT"
from
    "ERPI"."SALES_ORDER_FACTS" as "SALES_ORDER_FACTS",
    "ERPI"."DATE_DATA_CL" as "ISSUE_DATE",
    "ERPI"."DATE_DATA_CL" as "PROMISE_DATE"
where
    "SALES_ORDER_FACTS"."ISSUE_DATE_K" = "ISSUE_DATE"."DAYS_DATE"
and
    "SALES_ORDER_FACTS"."PROMISE_DATE_K" = "PROMISE_DATE"."DAYS_DATE"
group by
    "ISSUE_DATE"."YEAR",
    "ISSUE_DATE"."PERIOD",
    "PROMISE_DATE"."YEAR",
    "PROMISE_DATE"."PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K";
/******************************************************************
 Populate aggregate table
******************************************************************/  
INSERT INTO "ERPI"."AGG_NOITEM_SALES_DELIVERY_FACTS" (
    "DELIVERYDATE_YEAR",
    "DELIVERYDATE_PERIOD",
    "PROMISEDATE_YEAR",
    "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K",
    "AMOUNT",
    "AMOUNT_LOCAL",
    "AMOUNT_LIST",
    "AMOUNT_LIST_LOCAL",
    "QUANTITY_ORDER",
    "ID_DOCUMENT_NK",
    "ID_TRANS_DOC_NK",
    "COST",
    "DAYS_DELIVERY_DATE",
    "DAYS_PROMISE_DATE",
    "FACT_COUNT"
    )
select
    "ISSUE_DATE"."YEAR" as "DELIVERYDATE_YEAR",
    "ISSUE_DATE"."PERIOD" as "DELIVERYDATE_PERIOD",
    "PROMISE_DATE"."YEAR" as "PROMISEDATE_YEAR",
    "PROMISE_DATE"."PERIOD" as "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K",
    sum("SALES_DELIVERY_FACTS"."AMOUNT") as "AMOUNT",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LOCAL") as "AMOUNT_LOCAL",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LIST") as "AMOUNT_LIST",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LIST_LOCAL") as "AMOUNT_LIST_LOCAL",
    sum("SALES_DELIVERY_FACTS"."QUANTITY_ORDER") as "QUANTITY_ORDER",
    count(distinct "SALES_DELIVERY_FACTS"."ID_DOCUMENT_NK") as "ID_DOCUMENT_NK",
    count(distinct "SALES_DELIVERY_FACTS"."ID_TRANS_DOC_NK") as "ID_TRANS_DOC_NK",
    sum("SALES_DELIVERY_FACTS"."COST") as "COST",
    min("SALES_DELIVERY_FACTS"."ISSUE_DATE_K") as "DAYS_DELIVERY_DATE",
    max("SALES_DELIVERY_FACTS"."PROMISE_DATE_K") as "DAYS_PROMISE_DATE",   
    count(*) as "FACT_COUNT"
from
    "ERPI"."SALES_DELIVERY_FACTS" as "SALES_DELIVERY_FACTS",
    "ERPI"."DATE_DATA_CL" as "ISSUE_DATE",
    "ERPI"."DATE_DATA_CL" as "PROMISE_DATE"
where
    "SALES_DELIVERY_FACTS"."ISSUE_DATE_K" = "ISSUE_DATE"."DAYS_DATE"
and
    "SALES_DELIVERY_FACTS"."PROMISE_DATE_K" = "PROMISE_DATE"."DAYS_DATE"
group by
    "ISSUE_DATE"."YEAR",
    "ISSUE_DATE"."PERIOD",
    "PROMISE_DATE"."YEAR",
    "PROMISE_DATE"."PERIOD",
    "COMPANY_K",
    "CUSTOMER_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "BILL_CITY_K",
    "SHIP_CITY_K",
    "LOCAL_CURRENCY_K";
/******************************************************************
 Populate aggregate table
******************************************************************/  
INSERT INTO "ERPI"."AGG_NOCUST_SALES_DELIVERY_FACTS" (
    "DELIVERYDATE_YEAR",
    "DELIVERYDATE_PERIOD",
    "PROMISEDATE_YEAR",
    "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K",
    "AMOUNT",
    "AMOUNT_LOCAL",
    "AMOUNT_LIST",
    "AMOUNT_LIST_LOCAL",
    "QUANTITY_ORDER",
    "ID_DOCUMENT_NK",
    "ID_TRANS_DOC_NK",
    "COST",
    "DAYS_DELIVERY_DATE",
    "DAYS_PROMISE_DATE",
    "FACT_COUNT"
    )
select
    "ISSUE_DATE"."YEAR" as "DELIVERYDATE_YEAR",
    "ISSUE_DATE"."PERIOD" as "DELIVERYDATE_PERIOD",
    "PROMISE_DATE"."YEAR" as "PROMISEDATE_YEAR",
    "PROMISE_DATE"."PERIOD" as "PROMISEDATE_PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K",
    sum("SALES_DELIVERY_FACTS"."AMOUNT") as "AMOUNT",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LOCAL") as "AMOUNT_LOCAL",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LIST") as "AMOUNT_LIST",
    sum("SALES_DELIVERY_FACTS"."AMOUNT_LIST_LOCAL") as "AMOUNT_LIST_LOCAL",
    sum("SALES_DELIVERY_FACTS"."QUANTITY_ORDER") as "QUANTITY_ORDER",
    count(distinct "SALES_DELIVERY_FACTS"."ID_DOCUMENT_NK") as "ID_DOCUMENT_NK",
    count(distinct "SALES_DELIVERY_FACTS"."ID_TRANS_DOC_NK") as "ID_TRANS_DOC_NK",
    sum("SALES_DELIVERY_FACTS"."COST") as "COST",
    min("SALES_DELIVERY_FACTS"."ISSUE_DATE_K") as "DAYS_DELIVERY_DATE",
    max("SALES_DELIVERY_FACTS"."PROMISE_DATE_K") as "DAYS_PROMISE_DATE",   
    count(*) as "FACT_COUNT"
from
    "ERPI"."SALES_DELIVERY_FACTS" as "SALES_DELIVERY_FACTS",
    "ERPI"."DATE_DATA_CL" as "ISSUE_DATE",
    "ERPI"."DATE_DATA_CL" as "PROMISE_DATE"
where
    "SALES_DELIVERY_FACTS"."ISSUE_DATE_K" = "ISSUE_DATE"."DAYS_DATE"
and
    "SALES_DELIVERY_FACTS"."PROMISE_DATE_K" = "PROMISE_DATE"."DAYS_DATE"
group by
    "ISSUE_DATE"."YEAR",
    "ISSUE_DATE"."PERIOD",
    "PROMISE_DATE"."YEAR",
    "PROMISE_DATE"."PERIOD",
    "COMPANY_K",
    "ITEM_K",
    "DIVISION_K",
    "BUSINESS_UNIT_K",
    "PROFIT_CENTER_K",
    "ACCOUNT_REP_K",
    "LOCAL_CURRENCY_K";

-----------------------------------------------------------------------------------------------------------------------------
-- Extract CFType / Account, Budget, GL Trans, Trial Balance & Budget Item Dimensions and Trial Balance / Budget Item Facts.

-- Load Account Dimension
SELECT	
accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",

--  Replace line feeds in names.  PDI doesn't yet suppport Allow Breaks in Enclosed Fields in Text Input
--  and replace csv separator ;
	regexp_replace(accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, ''), E'\r|\n|;', '', 'g') AS "NAME",
	CASE WHEN(accnt_type='A') THEN 'Asset'
		WHEN(accnt_type='E') THEN 'Expense'
		WHEN(accnt_type='L') THEN 'Liability'
		WHEN(accnt_type='Q') THEN 'Equity'
		WHEN(accnt_type='R') THEN 'Revenue'
		ELSE accnt_type
	END AS "TYPE",
	COALESCE(subaccnttype_descrip, 'unspecified') AS "SUBTYPE",
	accnt_company
FROM (ONLY accnt LEFT OUTER JOIN
	company ON (accnt_company=company_number))
	LEFT OUTER JOIN subaccnttype ON (accnt_type=subaccnttype_accnt_type AND accnt_subaccnttype_code=subaccnttype_code)
WHERE true
	AND (NOT COALESCE(company_external, false))
	AND COALESCE(accnt_active, false)
ORDER BY "ACCOUNT_NK"

--
-- Getting cash flow types for accounts:
--
-- Acoounts are related to cash flow report categories with flitem.  flitem links to accounts through
-- account subtypes and directly when a user manually changes to cash flow report.  The select seems 
-- to work except for Common Stock and Equity.  Also we weed out the CASH POSITION category as accounts 
-- can't belong to two cash flow types.
--
SELECT accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
	flgrp_name AS "CFTYPE"
FROM (
SELECT flitem_flgrp_id, accnt_company, accnt_profit, accnt_number, accnt_sub
  FROM flitem JOIN (	SELECT accnt_company, accnt_profit, accnt_number, accnt_sub, accnt_id, subaccnttype_code
			FROM accnt, subaccnttype
			WHERE accnt_subaccnttype_code = subaccnttype_code) A 
			ON (accnt_id =  flitem_accnt_id)
			) FIRST
JOIN (SELECT flgrp_id, flgrp_name 
	FROM flgrp, flhead
	WHERE flgrp_flhead_id = flhead_id AND 
		flhead_name = 'Basic Statement of Cash Flows' AND 
		flgrp_name != 'CASH POSITION')
			 SECOND ON (flgrp_id = flitem_flgrp_id)
			 
UNION

SELECT accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
	flgrp_name AS "CFTYPE"
FROM (
SELECT flitem_flgrp_id, accnt_company, accnt_profit, accnt_number, accnt_sub
  FROM flitem JOIN (	SELECT accnt_company, accnt_profit, accnt_number, accnt_sub, accnt_id, subaccnttype_code
			FROM accnt, subaccnttype
			WHERE accnt_subaccnttype_code = subaccnttype_code) A 
			ON (subaccnttype_code =  flitem_subaccnttype_code)
			) FIRST
JOIN (SELECT flgrp_id, flgrp_name 
	FROM flgrp, flhead
	WHERE flgrp_flhead_id = flhead_id AND 
		flhead_name = 'Basic Statement of Cash Flows' AND 
		flgrp_name != 'CASH POSITION')
			 SECOND ON (flgrp_id = flitem_flgrp_id)

UNION

SELECT accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
	'Common Stock and Equity' AS "CFTYPE"
FROM accnt
WHERE accnt_subaccnttype_code = 'ERE' OR accnt_subaccnttype_code = 'EDC'

ORDER BY "ACCOUNT_NK"

-- Load Budget Head
SELECT 	budghead_name AS "BUDGET_NK", 
		CASE WHEN budghead_descrip = '' THEN 'Unspecified'
			ELSE COALESCE(regexp_replace(SUBSTR("budghead_descrip", 0, 40), E'\r|\n|;', '', 'g'), 'Unspecified') END as "NAME"
FROM budghead    

-------------------------------------------------
--Read GL Transaction - Account_Facts
SELECT	accnt_company 																	AS "COMPANY_NK",
		'GL' 																			AS "LEDGER_NK",
		COALESCE(accnt_profit, 'Unspecified')											AS "PROFIT_CENTER_NK",
       	CASE WHEN  gltrans_doctype = '' THEN 'Unspecified'
		ELSE COALESCE( gltrans_doctype::character varying, 'Unspecified') END			AS "JOURNAL_DOC_TYPE_NK",
		CASE WHEN(gltrans_docnumber='Misc.' AND
              invhist_docnumber IS NOT NULL) THEN
              (gltrans_docnumber || ' - ' || invhist_docnumber)
            ELSE COALESCE(regexp_replace(SUBSTR("gltrans_docnumber", 0, 25), E'\r|\n|;', '', 'g'), 'Unspecified') 
			|| '-' || accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '')
		END 																			AS "JOURNAL_DOC_NK",
		gltrans_id 																		AS "JOURNAL_LINE_ITEM_NK",
		accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
		gltrans_date																	AS "TRANS_DATE_NK",
		(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE)						AS "CURRENCY_NK",
		CASE WHEN (gltrans_amount < 0) THEN ABS(gltrans_amount) ELSE 0 END 				AS "DEBIT",
		CASE WHEN (gltrans_amount > 0) THEN gltrans_amount ELSE 0 END 					AS "CREDIT",
		CASE WHEN (gltrans_amount < 0) THEN ABS(gltrans_amount) ELSE 0 END 				AS "DEBIT_LOCAL",
		CASE WHEN (gltrans_amount > 0) THEN gltrans_amount ELSE 0 END 					AS "CREDIT_LOCAL"
FROM gltrans
JOIN accnt ON (gltrans_accnt_id=accnt_id) 
LEFT OUTER JOIN invhist ON (gltrans_misc_id=invhist_id
                            AND gltrans_docnumber='Misc.') 
WHERE (
       (gltrans_date >= '${extractstartdate}' )
   AND (NOT gltrans_deleted)
   AND (gltrans_posted)
);

--Read Trial Balance - Account Period Fact

SELECT	accnt_company 																	AS "COMPANY_NK",
		'GL' 																			AS "LEDGER",
		COALESCE(accnt_profit, 'Unspecified')																	AS "PROFIT_CENTER_NK",
		accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
		period_start																	AS "PERIOD_START_DATE_NK",
		period_end																		AS "PERIOD_END_DATE_NK",
		(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE)						AS "CURRENCY_NK",
		trialbal_debits													 				AS "DEBIT",
		trialbal_credits											 					AS "CREDIT",
		trialbal_ending																	AS "BALANCE",
		trialbal_debits													 				AS "DEBIT_LOCAL",
		trialbal_credits											 					AS "CREDIT_LOCAL",
		trialbal_ending																	AS "BALANCE_LOCAL"
FROM trialbal, accnt, period

WHERE ((trialbal_accnt_id=accnt_id)
   AND (trialbal_period_id=period_id)
   AND (period_start >= '${extractstartdate}' )
   AND (abs(trialbal_beginning)+abs(trialbal_ending)+abs(trialbal_debits)+abs(trialbal_credits) > 0)
);

-- Read Budget Item - Budget Facts

SELECT	accnt_company 																	AS "COMPANY_NK",
		'GL' 																			AS "LEDGER_NK",
		COALESCE(accnt_profit, 'Unspecified')											AS "PROFIT_CENTER_NK",
		accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
		budghead_name																	AS "BUDGET_NK",
		ltrim(to_char(budgitem_id, '99999999'), ' ')									AS "BUDGET_DOC_NK",
		period_start																	AS "PERIOD_START_DATE_NK",
		period_end																		AS "PERIOD_END_DATE_NK",
		(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE)						AS "CURRENCY_NK",
		budgitem_amount																	AS "AMOUNT",
		budgitem_amount																	AS "AMOUNT_LOCAL"
  FROM budgitem
  JOIN budghead ON (budgitem_budghead_id = budghead_id) 
  JOIN period ON (budgitem_period_id = period_id)
  JOIN accnt ON (budgitem_accnt_id = accnt_id)
WHERE 
 (period_start >= '${extractstartdate}' );
 
 --Read Budget Item / GL Trans - Period Facts
 
 SELECT	accnt_company 								AS "COMPANY_NK",
 		'GL' 									AS "LEDGER",
 		coalesce(budghead_name,'Unspecified')	    AS "BUDGET_NK",
 		COALESCE(accnt_profit, 'Unspecified')		AS "PROFIT_CENTER_NK",
 		accnt_company || '-' || COALESCE(accnt_profit, '') || '-' || accnt_number || '-' ||  COALESCE(accnt_sub, '') AS "ACCOUNT_NK",
 		theaccounts.period_start					AS "PERIOD_START_DATE_NK",
 		period_end							AS "PERIOD_END_DATE_NK",
 		(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE)	AS "CURRENCY_NK",
 		trialbal_debits			 				AS "DEBIT",
 		trialbal_credits	 					AS "CREDIT",
 		trialbal_ending							AS "BALANCE",
 		trialbal_debits			 				AS "DEBIT_LOCAL",
 		trialbal_credits	 					AS "CREDIT_LOCAL",
 		trialbal_ending							AS "BALANCE_LOCAL",
 		coalesce(budgitem_amount, 0)			AS "BUDGET_AMOUNT",
 		coalesce(budgitem_amount, 0)			AS "BUDGET_AMOUNT_LOCAL"
 FROM	
 (SELECT	accnt_company,	
 		accnt_profit,
 		accnt_id,
 		accnt_number,
 		accnt_sub,
 		period_start,
 		period_end,
 		(SELECT curr_abbr FROM curr_symbol WHERE curr_base = TRUE),
 		trialbal_debits	,
 		trialbal_credits,
 		trialbal_ending	
 FROM trialbal, accnt, period
 WHERE ((trialbal_accnt_id=accnt_id)
    AND (trialbal_period_id=period_id)
    AND (period_start >= '${extractstartdate}' )
    AND (abs(trialbal_beginning)+abs(trialbal_ending)+abs(trialbal_debits)+abs(trialbal_credits) > 0)
 )) theaccounts
 
 LEFT OUTER JOIN
 
 (SELECT	budgitem_accnt_id,
 		budghead_name,
 		period_start,
 		budgitem_amount
 
   FROM budgitem
   JOIN budghead ON (budgitem_budghead_id = budghead_id) 
   JOIN period ON (budgitem_period_id = period_id)
   JOIN accnt ON (budgitem_accnt_id = accnt_id)
 WHERE 
  (period_start >= '${extractstartdate}' 
 )) thebudgets
 
 ON (thebudgets.budgitem_accnt_id = theaccounts.accnt_id 
 	AND thebudgets.period_start = theaccounts.period_start
)

-----------------------------------------------------------------------------------------------------------------------------
=============================================================================================================================

1) To get the Chart of a saved query use this url - http://localhost:8080/?mode=table&plugin=true#query/open/erpi.sales_by_customer.saiku.saiku
2) Add the additional data source in the folder structure D:\saiku-server-2.6\tomcat\webapps\saiku\WEB-INF\classes\saiku-datasources
3) Add the xml file of ERPI_SO_Schema.xml to D:\saiku-server-2.6\tomcat\webapps\saiku\WEB-INF\classes\erpi 
4) Copy the file mdxudf from ErpBI\ErpBI\ErpBI\ETL\tools\lib to \saiku-server-2.6\tomcat\webapps\saiku\WEB-INF\lib
5) Removed all the reference to the GL DataMarts from the ERPI_SO_Schema.xml file
6) Modify the Server.xml file in D:\saiku-server-2.6\tomcat\conf to modify the port number.